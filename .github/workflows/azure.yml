name: Build and Publish

on:
  release:
    types:
      - created
  push:
  pull_request:

jobs:

  debug:
    name: Debug
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up secret file
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: |
          echo $AZURE_CREDENTIALS >> secrets.txt
          echo $REGISTRY_USERNAME >> secrets.txt
          echo $REGISTRY_PASSWORD >> secrets.txt

      - name: Run tmate
        uses: mxschmitt/action-tmate@v2

  java_build:
    name: Build Jar

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get Version
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml

      - name: Build with Gradle
        run: ./gradlew clean build :service:jacocoTestReport --refresh-dependencies -PartifactVersion=$VERSION

      - name: Upload Service Artifact
        uses: actions/upload-artifact@v2
        with:
          name: service
          path: service/build/libs/*.jar
#        if: github.event_name == 'release'

  docker_build:
    name: Build and Push to Docker Registry
    needs: java_build

    runs-on: ubuntu-latest

#    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "VERSION=$VERSION" >> $GITHUB_ENV

          IMAGE_ID=provenanceio/digital-currency-consortium-service

          TAGS=$IMAGE_ID:$VERSION

          PRERELEASE=${{ github.event.release.prerelease }}
          echo PRERELEASE=$PRERELEASE

          if [ "$PRERELEASE" == "false" ]; then
              TAGS=$TAGS,$IMAGE_ID:latest
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Service Artifact
        uses: actions/download-artifact@v2
        with:
          name: service
          path: service/build/libs

      - name: Login to DockerHub
        uses: azure/docker-login@v1
        with:
          login-server: digitalCurrencyConsortiumRegistry.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -f docker/Dockerfile-service -t digitalCurrencyConsortiumRegistry.azurecr.io/digital-currency-consortium/${{ steps.prep.outputs.tags }}
          docker push digitalCurrencyConsortiumRegistry.azurecr.io/digital-currency-consortium/${{ steps.prep.outputs.tags }}

      - name: Login to DockerHub
        uses: azure/docker-login@v1
        if: ${{ steps.prep.outputs.branch == github.event.repository.default_branch }}
        with:
          login-server: digitalCurrencyConsortiumRegistry.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -f docker/Dockerfile-database -t digitalCurrencyConsortiumRegistry.azurecr.io/digital-currency-consortium/provenanceio/digital-currency-consortium-database:latest
          docker push digitalCurrencyConsortiumRegistry.azurecr.io/digital-currency-consortium/provenanceio/digital-currency-consortium-database:latest

      - name: 'Deploy to Azure Container Instances'
        uses: 'azure/aci-deploy@v1'
        with:
          resource-group: digitalCurrencyConsortium
          dns-name-label: digital-currency-consortium-service
          image: digitalCurrencyConsortiumRegistry.azurecr.io/digital-currency-consortium/${{ steps.prep.outputs.tags }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: digital-currency-consortium-service-container
          location: 'centralus'