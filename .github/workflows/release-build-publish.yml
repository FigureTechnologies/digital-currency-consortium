name: Build and Publish

on:
  release:
    types:
      - created
  push:
    branches:
      - main
  pull_request:

jobs:

  java_build:
    name: Build Jar

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get Version
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml

      - name: Build with Gradle
        run: ./gradlew clean build :service:jacocoTestReport --refresh-dependencies -PartifactVersion=$VERSION

      - name: Upload Service Artifact
        uses: actions/upload-artifact@v2
        with:
          name: service
          path: service/build/libs/*.jar
        if: github.event_name == 'release'

      - name: Upload Report Artifact
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: report/build/libs/*.jar
        if: github.event_name == 'release'

  docker_build:
    name: Build and Push to Docker Registry
    needs: java_build

    runs-on: ubuntu-latest

    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "VERSION=$VERSION" >> $GITHUB_ENV

          SERVICE_IMAGE_ID=figuretechnologies/digital-currency-consortium-service
          REPORT_IMAGE_ID=figuretechnologies/digital-currency-consortium-report

          SERVICE_TAGS=$SERVICE_IMAGE_ID:$VERSION
          REPORT_TAGS=$REPORT_IMAGE_ID:$VERSION

          PRERELEASE=${{ github.event.release.prerelease }}
          echo PRERELEASE=$PRERELEASE

          if [ "$PRERELEASE" == "false" ]; then
              SERVICE_TAGS=$SERVICE_TAGS,$SERVICE_IMAGE_ID:latest
              REPORT_TAGS=$REPORT_TAGS,$REPORT_IMAGE_ID:latest
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=service_tags::${SERVICE_TAGS}
          echo ::set-output name=report_tags::${REPORT_TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up Docker Build
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Service Artifact
        uses: actions/download-artifact@v2
        with:
          name: service
          path: service/build/libs

      - name: Build and push service docker
        uses: docker/build-push-action@v3
        with:
          file: docker/Dockerfile-service
          context: .
          push: true
          tags: ${{ steps.prep.outputs.service_tags }}

      - name: Download Report Artifact
        uses: actions/download-artifact@v2
        with:
          name: report
          path: report/build/libs

      - name: Build and push report docker
        uses: docker/build-push-action@v3
        with:
          file: docker/Dockerfile-report
          context: .
          push: true
          tags: ${{ steps.prep.outputs.report_tags }}

      - name: Build and push database docker
        uses: docker/build-push-action@v3
        if: ${{ steps.prep.outputs.branch == github.event.repository.default_branch }}
        with:
          file: docker/Dockerfile-database
          context: .
          push: true
          tags: figuretechnologies/digital-currency-consortium-database:latest

  # TODO - add caching for the docker image and volumes that get mounted in
  wasm_build:
    name: Build and Release Wasm

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Optimize smart contract
        working-directory: ./smart-contract
        run: make optimize

      - name: Optimize smart contract sale
        working-directory: ./smart-contract-sale
        run: make optimize

      - name: Rename smart contract checksums
        shell: bash
        run: |
          #!/bin/bash
          set -ex
          sudo mv smart-contract/artifacts/checksums{,-dcc}.txt
          sudo mv smart-contract-sale/artifacts/checksums{,-dcc_sale}.txt

      - name: Release smart contracts
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "smart-contract/artifacts/*.wasm;smart-contract/artifacts/checksums-dcc.txt;smart-contract-sale/artifacts/*wasm;smart-contract-sale/artifacts/checksums-dcc_sale.txt"
        if: github.event_name == 'release'
